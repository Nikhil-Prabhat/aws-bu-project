Docker Compose File
==========================
To make enabled docker service for centos user :  
[ when system starts docker service will be avial for centos user ]
sudo systemctl enable docker@centos

To make start docker service for centos user :

sudo systemctl start docker@centos

To check the image lists:
[root@centos7 restsql]# docker image ls

REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
rest-jdbc           latest              f73e0d86f67b        9 hours ago         548 MB
docker.io/openjdk   8                   b190ad78b520        3 weeks ago         510 MB
docker.io/mysql     8                   be0dbf01a0f3        3 weeks ago         541 MB



**To run docker image for MySQL:

[root@ip-172-31-16-204 ec2-user]# docker run --name mysql-standalone -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=mytestdb -d docker.io/mysql:8

[root@ip-172-31-16-204 ec2-user]# docker container ls

CONTAINER ID  IMAGE          COMMAND               CREATED        STATUS            PORTS  NAMES
4f2ac6c35488  docker.io/mysql/mysql-server:latest  /entrypoint.sh my...  8 seconds ago  Up 8 seconds ago         mysql-standalone

To Run the BASH for MYSQL:
[root@ip-172-31-16-204 ec2-user]# docker container exec -it 4f2ac6c35488  bash

bash-4.2# mysql -uroot -proot
mysql> show databases;

**mytestdb shows in list

mysql>
mysql> quit;
Bye
bash-4.2# exit


[root@ip-172-31-16-204 ec2-user]# docker container ls

CONTAINER ID  IMAGE        COMMAND               CREATED        STATUS            PORTS  NAMES
4f2ac6c35488  docker.io/mysql/mysql-server:latest  /entrypoint.sh my...  5 minutes ago  Up 5 minutes ago         mysql-standalone

[root@ip-172-31-16-204 ec2-user]# docker container stop 4f2ac6c35488

[root@ip-172-31-16-204 ec2-user]# docker container rm 4f2ac6c35488

[root@ip-172-31-16-204 ec2-user]# docker container ls

[root@ip-172-31-16-204 ec2-user]#

==================
Spring boot rest + mysql  run by docker compose:
==============================

We will be installing the docker compose as follows-

$ sudo curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

Next, set the permissions to make the binary executable:

$ sudo chmod +x /usr/local/bin/docker-compose


Add it into docker group
$ sudo groupadd docker 
$ sudo usermod â€“aG docker centos
$ groups centos

-------------------------------------------------------------
Now again lets check the docker-compose version
$ docker-compose --version


Under current 'restsql' folder , make a new folder to store db script
[root@centos7 restsql]# mkdir dbscript
[root@centos7 restsql]# vi dbscript/db.sql 
use countrydb;
create table country (code varchar(10) not null primary key , name varchar(10));
insert into country values ('IN','India'),('US','United');

Esc :wq

Under the folder 'restsql' , make a file as docker-compose.yml as :

[root@centos7 restsql]# cat docker-compose.yml
version: "3"
services:
  rest-jdbc:
    image: rest-jdbc
    ports:
      - "8080:8080"
    networks:
      - country-mysql
    depends_on:
      - mysqldb
 
  mysqldb:
    image: docker.io/mysql:8
    networks:
      - country-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=countrydb
    volumes:
      - ./dbscript:/docker-entrypoint-initdb.d  

networks:
  country-mysql: 

Save it  Esc :wq

====

Build the docker image for the spring boot project [ if image is not there ]
docker image build -t rest-jdbc .
docker images



Now give command to run :  docker-compose up

2 applications are started... Open a new terminal , check container id.

Now start mysql  env :

[root@centos7 restsql]# docker container exec -it ee3054eed594 bash

#mysql -uroot -proot
mysql>
show databases;
use countrydb;
select * from country;
quit;

exit;


Open another terminal , use command as :
curl http://localhost:8080/getcountries    [ if not works ]

Or

docker-machine ip
curl http://<ip>:8080/getcountries


curl --header "Content-Type: application/json"   --request POST   --data '{"code":"UK","name":"Kingdom"}'  http://localhost:8080/addcountry

===========================================



